//
//
//
#include "\do lcase {${_}}business.h"


${_}BusinessBase::${_}BusinessBase(QSharedPointer<qx::QxSession> session) : _session(session)
{
    if (_session.isNull())
    {
        logp("Session is null");
        _session.reset(new qx::QxSession);
    }
}

QSqlError ${_}BusinessBase::InsertItem(${_} &controller, const QSharedPointer<qx::QxSession> &session)
{
    QSqlError error;

    CheckSession(session);

    error = _session->insert(controller);

    if (error.isValid())
    {
        error.setType(QSqlError::ErrorType::UnknownError);
        error.setNumber((int)ByHulkEnum::HulkError::CantInsert);
        error.setDatabaseText(error.text());
    }
    return error;
}

QByteArray ${_}BusinessBase::Insert(const QByteArray &params)
{
    QByteArray response;
    ${_} itemEntity;
    Bytech::Hulk::${_} itemProto;

    ProtoBuf::Deserialize(params, itemProto);

    proto_to_db(itemProto, itemEntity);

    if (!HasErrors())
    {
        QSqlError error = InsertItem(itemEntity, _session);
        if (error.isValid())
        {
            AddError(error.number(), error.text());
        }
    }

    if (HasErrors())
    {
        response = ErrorMessage(Bytech::Hulk::Enums::HulkEntityType::HulkResult);
    }
    else
    {
        db_to_proto(itemEntity, itemProto);
        itemProto.mutable_header()->mutable_header()->set_action(ByHulkEnum::HulkActions::Ok);

        response = ProtoBuf::Serialize(itemProto);
    }

    return response;
}


QByteArray ${_}BusinessBase::GetAll(const QByteArray &params)
{
    Q_UNUSED(params)

    QByteArray response;
    ${_} itemEntity;
    Bytech::Hulk::${_}List listProto;
    list_of_${_} list;


    Bytech::Hulk::BaseHeader *res = createHeaderGetAll(Bytech::Hulk::Enums::HulkEntityType::${_}List);
    listProto.set_allocated_header(res);

    Bytech::Hulk::HulkResult *hres = createResultGetAll(Bytech::Hulk::Enums::HulkEntityType::${_});
    listProto.set_allocated_result(hres);


    QSqlError error = itemEntity.qxFetchAll(list);
    if (error.isValid())
    {
        AddError(ByHulkEnum::HulkError::TransactionFailure, error.text());
        response = ErrorMessage(Bytech::Hulk::Enums::HulkEntityType::HulkResult);
    }
    else
    {
        auto b = list.begin();
        auto e = list.end();
        for (; b != e; ++b)
        {
            Bytech::Hulk::${_} *item = listProto.add_list();
            Bytech::Hulk::BaseHeader *bs = createHeaderGetAll(Bytech::Hulk::Enums::HulkEntityType::${_}List);

            item->set_allocated_header(bs);
            db_to_proto(*b->second, *item);
        }
        response = ProtoBuf::Serialize(listProto);
    }

    return response;
}

QByteArray ${_}BusinessBase::GetById(const QByteArray &params)
{
    Bytech::Hulk::HulkGetById getById;
    ProtoBuf::Deserialize(params, getById);

    QByteArray response;

    ${_} itemEntity;
    Bytech::Hulk::${_} itemProto;

    Bytech::Hulk::BaseHeader *res = createHeaderGetById(Bytech::Hulk::Enums::HulkEntityType::${_});
    itemProto.set_allocated_header(res);

    itemEntity.setId(getById.id());
    if (!itemEntity.qxExist())
    {
        AddError(ByHulkEnum::HulkError::ItemNotExist);
        response = ErrorMessage(Bytech::Hulk::Enums::HulkEntityType::HulkResult);
    }
    else
    {
        db_to_proto(itemEntity, itemProto);
        itemProto.mutable_header()->mutable_header()->set_action(ByHulkEnum::HulkActions::Ok);
        response = ProtoBuf::Serialize(itemProto);
    }

    return response;
}


QByteArray ${_}BusinessBase::Update(const QByteArray &params)
{
    QByteArray response;
    ${_} itemEntity;
    Bytech::Hulk::${_} updateProto;

    ProtoBuf::Deserialize(params, updateProto);
    itemEntity.setId(updateProto.id());
    if (!itemEntity.qxExist())
    {
        AddError(ByHulkEnum::HulkError::ItemNotExist);
        response = ErrorMessage(Bytech::Hulk::Enums::HulkEntityType::HulkResult);
        return response;
    }

    proto_to_db(updateProto, itemEntity);

    if (!HasErrors())
    {
        itemEntity.setLastModified(QDateTime::currentDateTimeUtc());
        QSqlError error = itemEntity.qxUpdate();
        if (error.isValid())
        {
            AddError(ByHulkEnum::HulkError::TransactionFailure, error.text());
            response = ErrorMessage(Bytech::Hulk::Enums::HulkEntityType::HulkResult);
        }
        else
        {
            response = OkMessage(ByHulkEnum::HulkEntityType::${_});
        }
    }
    else
    {
        response = ErrorMessage(Bytech::Hulk::Enums::HulkEntityType::HulkResult);
    }

    return response;
}

//
// Delete
//
QByteArray ${_}BusinessBase::Delete(const QByteArray &params)
{
    QByteArray response;
    Bytech::Hulk::HulkDelete itemProto;

    ProtoBuf::Deserialize(params, itemProto);

    ${_} controller;
    controller.setId(itemProto.id());
    if (!controller.qxExist())
    {
        AddError(ByHulkEnum::HulkError::ItemNotExist);
        response = ErrorMessage(Bytech::Hulk::Enums::HulkEntityType::HulkResult);
    }
    else
    {
        QSqlError error = DeleteItem(itemProto.id(), _session);
        if (error.isValid())
        {
            AddError(ByHulkEnum::HulkError::DeletionFailure, error.text());
            response = ErrorMessage(Bytech::Hulk::Enums::HulkEntityType::HulkResult);
        }
        else
        {
            response = OkMessage(ByHulkEnum::HulkEntityType::${_});
        }
    }

    return response;
}

QSqlError ${_}BusinessBase::DeleteItem(QVariant id, const QSharedPointer<qx::QxSession> &session)
{
    CheckSession(session);

    QSqlError error;

    ${_} controller;
    controller.setId(id);
    if (!controller.qxExist())
    {
        AddError(ByHulkEnum::HulkError::ItemNotExist);
        return error;
    }

    TerminalsBusiness terminals(session);

    controller.getlist_of_Terminals(true);
    foreach(auto t, controller.list_of_Terminals())
    {
        error = terminals.DeleteItem(t.second->getId(), _session);
        if (error.isValid())
        {
            error = AddError(ByHulkEnum::HulkError::DeletionFailure, error.text());
        }
    }

    if (_session->isValid())
    {
        _session->deleteById(controller);

        if (!_session->isValid())
        {
            error = AddError(ByHulkEnum::HulkError::DeletionFailure, _session->firstError().text());
        }
    }

    return error;
}


//
// Error reporting
//

Bytech::Hulk::HulkResult * ${_}BusinessBase::get_errors_proto()
{
    Bytech::Hulk::HulkResult * result = createResultError(Bytech::Hulk::Enums::HulkEntityType::${_});

    auto begin = _errors.begin();
    auto end = _errors.end();

    for (; begin != end; ++begin) {
        QSqlError & item = *begin;
        Bytech::Hulk::HulkError * err = result->add_errors();

        switch (item.number()) {
        case Bytech::Hulk::Enums::HulkError::ItemNotExist:
        case Bytech::Hulk::Enums::HulkError::CantInsert:
        case Bytech::Hulk::Enums::HulkError::TransactionFailure:
        case Bytech::Hulk::Enums::HulkError::MissingRequiredField:
        case Bytech::Hulk::Enums::HulkError::DeletionFailure:
        default:
            createError (err, Bytech::Hulk::Enums::HulkSeverity::Error, (Bytech::Hulk::Enums::HulkError)item.number(),
                         item.databaseText());
            break;
        }
    }

    return result;
}


//
// ------ Proto to db & db to Proto --------
//

void ${_}BusinessBase::proto_to_db(Bytech::Hulk::${_} &proto, ${_} &db)
{
    QSqlError error;
\for fields [
    // % (not null \if %.not_null == yes [YES ] [NO ] )
    if (! proto.has_\do lcase [% ]())
    {
        AddError(Bytech::Hulk::Enums::HulkError::MissingRequiredField, "Missing field %");
    }
    else
    {
    \if %.type == nvarchar [db.set%(QString::fromStdString(proto.\do lcase [%]());
    ] \if %.type == integer [long long_% = proto.\do lcase [%]();
    db.set% (long_%);
    ] \if %.type == datetime [QDateTime datetime_%;
    datetime_% .setTime_t(proto.\do lcase [%]());
    db.set% (datetime_%);
    ] \if %.type == blob [char * blob_% = proto.\do lcase [%]();
    db.set% (QByteArray(blob_%));
    ] \if %.type == bit [bool bit_% = proto.\do lcase [%]();
    db.set% (QVariant(bit_%));
    ]
    }
]
}


void ${_}BusinessBase::db_to_proto(${_} &db, Bytech::Hulk::${_} &proto)
{
\for fields [ // %
    \if %.type == nvarchar [proto.set_\do lcase [%](db.get%().toStdString());
    ] \if %.type == integer [proto.set_\do lcase [%](static_cast<int>(db.get%()));
    ] \if %.type == datetime [QDateTime datetime_% = db.get%();
    proto.set_\do lcase [%] (datetime_%\.toTime_t());
    ] \if %.type == blob [QByteArray blob_% = db.get%();
    proto.set_\do lcase [%] (blob_%\.data());
    ] \if %.type == bit [QVariant bit_% = db.get%();
    proto.set_\do lcase [%] (bit_%\.toBool());
    ]
]
}




