//
//
//
// BEGIN $_

void TestDoors::GetByIdDoorsSuccess()
{
    QSqlError error;

    ByHulk::HulkGetById message;
    Doors doorsdb;

    message.set_queryentity(ByHulkEnum::HulkEntityType::Doors);

    ByBase::MessageHeader *messageHeader = CreateHeader(message);
    messageHeader->set_action(ByHulkEnum::HulkActions::GetById);
    messageHeader->set_entity(ByHulkEnum::HulkEntityType::HulkGetById);

    message.set_id(1);

    QByteArray requestMessage = ProtoBuf::Serialize(message);

    IncomingMessageProcessor processor;
    QByteArray response = processor.ProcessMessage(requestMessage);

    Bytech::Hulk::MessageExchange m;
    ProtoBuf::Deserialize(response, m);

    QVERIFY2((m.header().header().entity() == ByHulkEnum::HulkEntityType::Doors), "Error GetById Success Item");
    QVERIFY2((m.header().header().action() == Bytech::Hulk::Enums::HulkActions::Ok), "Error GetById success");

    Bytech::Hulk::Doors doors;
    ProtoBuf::Deserialize(response, doors);

    doorsdb.setId(1);
    doorsdb.qxFetchById();

\for fields
[         // %.type % = %#;
    \if %.type == nvarchar [    doorsdb.set%(QString::fromStdString(doors.\do lcase[%]()));
]
    \if %.type == integer [    doorsdb.set%(doors.\do lcase[%]());
]
    \if %.type == bit [    doorsdb.set%(doors.\do lcase[%]());
]
    \if %.type == blob [    std::string str% = doors.\do lcase[%]();
    doorsdb.set%(QByteArray(str%.c_str(), str%.size()));
]
    \if %.type == int64 [    doorsdb.set%(doors.\do lcase[%]);
]
    \if %.type == datetime [    QDateTime dt% = QDateTime::fromTime_t(doors.\do lcase[%]());
    QTime time = dt%\.time();
    dt%\.setTime(QTtime(time.hour(), time.minute()));
    doorsdb.set%(dt%);
    // doorsdb.set%(QDateTime::currentDateTime().toTime_t());
]
]

//
// Relations
//
\for relations[

    // Relation %
    %.table tbl%;
    tbl%\.set%.set("${_} %");
    tbl%\.qxInsert();
    doorsdb.set%(tbl%); ]

    doorsdb.qxInsert();

